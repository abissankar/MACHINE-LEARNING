{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[],"authorship_tag":"ABX9TyN0zOdbzcq7VucV3ggPlJJi"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"-v-vfbwV4spj"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n"]},{"cell_type":"code","source":["#to inialize centroids (random) (k-no of times)\n","def initialize_centroid(x,k):\n","  indices =np.random.choice(len(x),k,replace=False)\n","  #len(x) returns the length of the array or list x, indicating the range from which to choose random indices.k represents the number of random indices you want to select.\n","  #replace=False ensures that the chosen indices are unique and not repeated.\n","  return x[indices]"],"metadata":{"id":"OUNa2tQfBzxN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#assigning clusters and finding distances\n","def assign_to_clusters(x,centroids):\n","  distances=np.linalg.norm(x[:,np.newaxis]-centroids,axis=2)\n","  return np.argmin(distances,axis=1)"],"metadata":{"id":"ayX10MeODEbc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#centroids are updated based on mean\n","def update_centroids(x,label,k):\n","  centroids =np.array([x[label==i].mean(axis=0)for i in range(k)])\n","  return centroids\n"],"metadata":{"id":"N9TiFF9EESwO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#identifing kmeans\n","def k_means(x,k,max_iters=100):\n","  centroids = initialize_centroid(x,k)\n","  for _ in range(max_iters):#updating the old centroids with mean value\n","    labels=assign_to_clusters(x,centroids)\n","    new_centroids=update_centroids(x,labels,k)\n","    if np.all(centroids==new_centroids):\n","      break\n","\n","    centroids=new_centroids\n","  return labels,centroids"],"metadata":{"id":"Jbqq3kENE_nT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["np.random.seed(42)\n","x=np.concatenate([np.random.normal(loc=i,scale=i,size=(50,2))for i in range(5)])\n"],"metadata":{"id":"v3IKiqSmGjWg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x"],"metadata":{"id":"txUcyd7fHkL_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["k=5\n","label,centroids=k_means(x,k)"],"metadata":{"id":"g2PowGcPIDJd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.scatter(x[:,0],x[:,1],c=label,cmap='viridis')\n","plt.scatter(centroids[:,0],centroids[:,1],marker='x',s=200,c='red',label='Centroid')\n","plt.title('k-means Clustering')\n","plt.xlabel(\"x_axis\")\n","plt.ylabel(\"y_axis\")\n","plt.legend()\n","plt.show()"],"metadata":{"id":"SZL-KAQTIPWf"},"execution_count":null,"outputs":[]}]}